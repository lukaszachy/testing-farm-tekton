apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tf-scheduler
spec:
  description: TODO
  params:
    - name: PULL_SECRET_NAME
    - name: TESTING_FARM_TOKEN_SECRET_NAME
    - name: SNAPSHOT
    - name: GIT_URL
      default: ""
      description: URL of the GIT repository that contains the tests.
    - name: TMT_PLAN
      default: "."
      description: Name filter for plans defined in the repo.
    - name: GIT_REF
      default: ""
      description: Branch of the git repository used containing the tests
    - name: COMPOSE
      default: "Fedora-40"
      description: Compose to use for the system-under-test.
    - name: ARCH
      default: "x86_64"
      description: Comma-separated list of architectures to run against.
    - name: TIMEOUT
      default: "720"
      description: Set the timeout for the request in minutes. If the test takes longer than this, it will be terminated.
    - name: TESTING_FARM_API_URL
      default: https://api.dev.testing-farm.io/v0.1
      description: The testing-farm instance API to use
  volumes:
    - name: pull-secret-volume
      secret:
        secretName: "$(params.PULL_SECRET_NAME)"
    - name: testing-farm-secret
      secret:
        secretName: "$(params.TESTING_FARM_TOKEN_SECRET_NAME)"
  results:
    - name: tf-request
  steps:
    - name: scheduler
      image: quay.io/testing-farm/cli:latest
      volumeMounts:
        - name: pull-secret-volume
          mountPath: "/etc/secrets/pull-secret-volume"
          readOnly: true
        - name: testing-farm-secret
          mountPath: "/etc/secrets/testing-farm-secret"
          readOnly: true
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: GIT_URL
          value: $(params.GIT_URL)
        - name: GIT_REF
          value: $(params.GIT_REF)
        - name: COMPOSE
          value: $(params.COMPOSE)
        - name: ARCH
          value: $(params.ARCH)
        - name: TIMEOUT
          value: $(params.TIMEOUT)
        - name: TESTING_FARM_API_URL
          value: $(params.TESTING_FARM_API_URL)
        - name: TMT_PLAN
          value: $(params.TMT_PLAN)      
        - name: PULL_REQUEST_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/pull-request']
        - name: GIT_PROVIDER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/git-provider']
        - name: SNAPSHOT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/snapshot']
        - name: INTEGRATION_TEST_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['test.appstudio.openshift.io/scenario']
        - name: COMPONENT
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']              
      script: |
            #!/usr/bin/env bash
            export TESTING_FARM_API_TOKEN=$(cat /etc/secrets/testing-farm-secret/testing-farm-token)

            # Prepare secrets for testing farm
            secrets_file=$(mktemp)
            echo "AUTHFILE_b64: \"$(base64 -w 0 /etc/secrets/pull-secret-volume/.dockerconfigjson)\"" >> $secrets_file

            set -x
            # SNAPSHOT can contain multiple components, we are interested only in the one for 'COMPONENT'
            _git_url=$(python3 -c "import os; import json; print([v for v in json.loads(os.environ['SNAPSHOT'])['components'] if v['name'] == '$COMPONENT'][0]['source']['git']['url'])")
            _git_ref=$(python3 -c "import os; import json; print([v for v in json.loads(os.environ['SNAPSHOT'])['components'] if v['name'] == '$COMPONENT'][0]['source']['git']['revision'])")
            _image_url=$(python3 -c "import os; import json; print([v for v in json.loads(os.environ['SNAPSHOT'])['components'] if v['name'] == '$COMPONENT'][0]['containerImage'])")
            _image_name=$COMPONENT

            if [[ -z "$GIT_URL" ]]; then
              GIT_URL=$_git_url
            fi

            # Respect explicit input
            if [[ -z "$GIT_REF" ]]; then
              # Use merge/pull requests for checkout as the 'fork' might be private
              if [[ -n "$PULL_REQUEST_NUMBER" ]]; then
                case $GIT_PROVIDER in
                  gitlab)
                    GIT_REF="merge-requests/$PULL_REQUEST_NUMBER/head"
                    ;;
                  github)
                    GIT_REF="pull/$PULL_REQUEST_NUMBER/head"
                    ;;
                  *)
                    echo Unknown git_provider=$GIT_PROVIDER, use 'revision' as GIT_REF
                    GIT_REF=$_git_ref
                    ;;
                esac
              fi
            fi

            context_file=$(mktemp)
            echo 'trigger: commit' > $context_file
            echo 'initiator: konflux' >> $context_file

            # Name of the snapshot
            if [ -n "$SNAPSHOT_NAME" ]; then
              echo "snapshot_name: $SNAPSHOT_NAME" >> $context_file
            fi

            # Name of the integration test
            if [ -n "$INTEGRATION_TEST_NAME" ]; then
              echo "integration_test_name: $INTEGRATION_TEST_NAME" >> $context_file
            fi

            tf_log=$(mktemp)
                        
            testing-farm request \
                --secret @$secrets_file \
                --environment SNAPSHOT_b64="$(echo ${SNAPSHOT} | base64 -w 0)" \
                --environment IMAGE_URL="$_image_url" \
                --environment IMAGE_NAME="$_image_name" \
                --plan "${TMT_PLAN}" \
                --context @$context_file \
                --git-url "${GIT_URL}" \
                --git-ref "${GIT_REF}" \
                --compose "${COMPOSE}" \
                --arch "${ARCH}" \
                --timeout "${TIMEOUT}" \
                --no-wait |& tee $tf_log

            request_url=$(grep -oE "${TESTING_FARM_API_URL}.*$" $tf_log)
            echo -n "${request_url}" > $(results.tf-request.path)
