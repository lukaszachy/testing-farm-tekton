apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: testing-farm
spec:
  description: Initiate testing-farm test given a list of container images
  params:
    - name: SNAPSHOT
      description: A list of container images that should undergo testing
    - name: GIT_URL
      default: ""
      description: URL of the GIT repository that contains the tests.
    - name: TMT_PLAN
      default: "."
      description: Name filter for plans defined in the repo.
    - name: GIT_REF
      default: ""
      description: Branch of the git repository used containing the tests
    - name: COMPOSE
      default: "Fedora-40"
      description: Compose to use for the system-under-test.
    - name: ARCH
      default: "x86_64"
      description: Comma-separated list of architectures to run against.
    - name: TIMEOUT
      default: "720"
      description: Set the timeout for the request in minutes. If the test takes longer than this, it will be terminated.
    - name: TESTING_FARM_API_URL
      default: https://api.dev.testing-farm.io/v0.1
      description: The testing-farm instance API to use
  volumes:
    - name: testing-farm-secret
      secret:
        secretName: testing-farm-secret
    - name:   varnish-6-mvp-pull
      secret:
        secretName:   varnish-6-mvp-pull
    - name: interim-gitlab-token
      secret:
        secretName: interim-gitlab-token
  steps:
    - image: quay.io/testing-farm/cli:latest
      volumeMounts:
        - name: testing-farm-secret
          mountPath: "/etc/secrets/testing-farm-secret"
          readOnly: true
        - name:   varnish-6-mvp-pull
          mountPath: "/etc/secrets/varnish-6-mvp-pull"
          readOnly: true
        - name: interim-gitlab-token
          mountPath: "/etc/secrets/interim-gitlab-token"
          readOnly: true
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: GIT_URL
          value: $(params.GIT_URL)
        - name: GIT_REF
          value: $(params.GIT_REF)
        - name: COMPOSE
          value: $(params.COMPOSE)
        - name: ARCH
          value: $(params.ARCH)
        - name: TIMEOUT
          value: $(params.TIMEOUT)
        - name: TESTING_FARM_API_URL
          value: $(params.TESTING_FARM_API_URL)
        - name: TMT_PLAN
          value: $(params.TMT_PLAN)
      script: |
            #!/usr/bin/env bash
            export TESTING_FARM_API_TOKEN=$(cat /etc/secrets/testing-farm-secret/testing-farm-token)
            export GITLAB_TOKEN="$(cat /etc/secrets/interim-gitlab-token/token)"

            # Prepare secrets for testing farm
            secrets_file=$(mktemp)
            echo "AUTHFILE_b64: \"$(base64 -w 0 /etc/secrets/varnish-6-mvp-pull/.dockerconfigjson)\"" >> $secrets_file
            echo "GITLAB_TOKEN: \"$GITLAB_TOKEN\"" >> $secrets_file

            if [[ -z "$GIT_URL" ]]; then
              GIT_URL=$(python3 -c "import os; import json; print(json.loads(os.environ['SNAPSHOT'])['components'][0]['source']['git']['url'])")
            fi

            if [[ -z "$GIT_REF" ]]; then
              GIT_REF=$(python3 -c "import os; import json; print(json.loads(os.environ['SNAPSHOT'])['components'][0]['source']['git']['revision'])")
            fi

            # Inject token, otherwise testing farm can't clone the repo
            GIT_URL="$(echo "$GIT_URL" | sed "s;/\(gitlab.com\);\/token:$GITLAB_TOKEN@\1;")"

            context_file=$(mktemp)
            echo 'trigger: commit' > $context_file
            echo 'initiator: rhtap' >> $context_file

            tf_log=$(mktemp)
            
            declare -p SNAPSHOT
            testing-farm request \
                --secret @$secrets_file \
                --environment SNAPSHOT_b64="$(echo ${SNAPSHOT} | base64 -w 0)" \
                --plan "${TMT_PLAN}" \
                --context @$context_file \
                --git-url "${GIT_URL}" \
                --git-ref "${GIT_REF}" \
                --compose "${COMPOSE}" \
                --arch "${ARCH}" \
                --timeout "${TIMEOUT}" \
                --no-wait |& tee $tf_log
                
            # we cannot use --wait as tf cli suffer https://issues.redhat.com/browse/TFT-2604
            request_url=$(grep -oE "${TESTING_FARM_API_URL}.*$" $tf_log)
            helper_script=$(mktemp)
            
            cat <<<EOF > $helper_script
            import requests
            import sys
            import time          

            while True:
                ret = requests.get(sys.argv[1]).json()
                state = ret['state']
                print(f'{state=}', file=sys.stderr)
                if state not in ['running']:
                    break
                time.sleep(60) 

            # not running...
            if state != 'complete':
                raise SystemExit(2)
                
            overal_result = ret['result']['overall']
            print(f'{overal_result=}', file=sys.stderr)

            if overal_result != 'passed':
                raise SystemExit(1)
            EOF
            
            python3 $helper_script $request_url
            
